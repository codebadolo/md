| **Étape**                          | **Priorité** | **Backend (Django REST Framework)**                                                                 | **Frontend (Flutter)**                                                                                   |
|------------------------------------|--------------|-----------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|
| **1. Configuration Initiale**      | Haute        | - Créer le projet Django.<br>- Créer les applications (`users`, `artisans`, `catalog`, etc.).<br>- Définir les modèles de base de données.<br>- Configurer DRF. | - Créer le projet Flutter.<br>- Configurer les packages nécessaires (`http`, `provider`, etc.).<br>- Structurer les dossiers. |
| **2. Authentification**            | Haute        | - Créer les sérialiseurs pour `User`.<br>- Implémenter les vues d'API pour l'inscription et la connexion.<br>- Configurer JWT ou TokenAuthentication. | - Créer les écrans d'inscription et de connexion.<br>- Intégrer l'API d'authentification.<br>- Gérer l'état de l'utilisateur avec `Provider`. |
| **3. Catalogue d'Objets**          | Haute        | - Créer les sérialiseurs pour `CulturalObject`.<br>- Implémenter les vues d'API pour le catalogue.<br>- Ajouter des filtres et une recherche. | - Créer les écrans pour afficher la liste des objets et les détails.<br>- Intégrer l'API du catalogue.<br>- Afficher les objets dans une `ListView` ou `GridView`. |
| **4. Panier et Commandes**         | Haute        | - Créer les modèles `Order` et `OrderItem`.<br>- Implémenter les vues d'API pour le panier et les commandes. | - Créer les écrans pour le panier.<br>- Intégrer l'API des commandes.<br>- Permettre l'ajout/suppression d'articles. |
| **5. Paiement et Livraison**       | Haute        | - Intégrer un service de paiement (Stripe, PayPal).<br>- Implémenter les vues d'API pour le paiement. | - Intégrer le SDK de paiement (ex. : `flutter_stripe`).<br>- Gérer le processus de paiement dans Flutter.<br>- Ajouter des options de livraison. |
| **6. Histoires et Interviews**     | Moyenne      | - Créer le modèle `Story`.<br>- Implémenter les vues d'API pour les histoires.                     | - Créer les écrans pour afficher les histoires.<br>- Intégrer l'API des histoires.<br>- Afficher les vidéos ou textes. |
| **7. Interface Utilisateur (UI)**  | Moyenne      | - (Backend prêt pour l'UI).                                                                        | - Créer des templates pour les pages principales.<br>- Utiliser un framework CSS (Bootstrap, Tailwind).<br>- Rendre l'interface réactive. |
| **8. Tests et Déploiement**        | Haute        | - Écrire des tests unitaires et fonctionnels.<br>- Déployer sur Heroku, AWS, ou DigitalOcean.      | - Écrire des tests unitaires et fonctionnels.<br>- Déployer sur Google Play Store, App Store, et Firebase Hosting (web). |
| **9. Fonctionnalités Avancées**    | Faible       | - Ajouter des endpoints pour les fonctionnalités avancées (forum, recommandations, etc.).          | - Implémenter un espace communautaire.<br>- Ajouter des recommandations personnalisées.<br>- Intégrer la réalité augmentée (AR). |
